\documentclass{article}
\usepackage[letterpaper, top=1in, bottom=1in, left=1in, right=1in]{geometry}
\usepackage[utf8]{inputenc}


\usepackage[english]{babel}
\usepackage{tikz-cd, extarrows, esvect, esint, pgfplots, lipsum, bm, dcolumn}
\usetikzlibrary{arrows}
\usepackage{amsmath, amssymb, amsthm, mathrsfs, mathtools, centernot, hyperref, fancyhdr, lastpage}
\usepackage{graphicx} 
\usepackage{caption, subcaption}
\usepackage{enumitem}
\usepackage{fancyvrb,newverbs,xcolor}
\usepackage{tikz}
\usetikzlibrary{matrix}
\definecolor{cverbbg1}{gray}{0.93}
\newenvironment{cverbatim}
 {\SaveVerbatim{cverb}}
 {\endSaveVerbatim
  \flushleft\fboxrule=0pt\fboxsep=.5em
  \colorbox{cverbbg1}{%
    \makebox[\dimexpr\linewidth-2\fboxsep][l]{\BUseVerbatim{cverb}}%
  }
  \endflushleft
}

\renewcommand{\thispagestyle}[1]{}

\DeclareMathOperator{\Tr}{Tr}
\DeclareMathOperator{\Sym}{Sym}
\DeclareMathOperator{\Span}{span}
\DeclareMathOperator{\std}{std}
\DeclareMathOperator{\Cov}{Cov}
\DeclareMathOperator{\Var}{Var}
\DeclareMathOperator{\Corr}{Corr}
\DeclareMathOperator*{\argmin}{\arg\!\min}

\theoremstyle{definition}
\newtheorem{theorem}{Theorem}[section]
\newtheorem{proposition}[theorem]{Proposition}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{example}{Example}[section]
\newtheorem{exercise}{Exercise}[section]
\newtheorem{corollary}{Corollary}[theorem]
\theoremstyle{remark}
\newtheorem*{remark}{Remark}
\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]
\renewcommand{\qed}{\hfill$\blacksquare$}
\renewcommand{\footrulewidth}{0.4pt}% default is 0pt

\newenvironment{solution}{\noindent \textit{Solution.}}{}

\renewcommand{\thispagestyle}[1]{}


\begin{document}
\pagestyle{fancy}

\lhead{Web Development}
\chead{Muchang Bahng}
\rhead{\date{Summer 2023}}
\cfoot{\thepage / \pageref{LastPage}}

\title{Web Development}
\author{Muchang Bahng}

\maketitle

\tableofcontents

\pagebreak

\section{Basics}

Basic web development consists of three languages: 
\begin{enumerate}
    \item \textbf{HTML} to define the content of web pages
    \item \textbf{CSS} to specify the layout of web pages
    \item \textbf{JavaScript} to program the behavior of web pages
\end{enumerate}
Most of vanilla HTML, CSS, and JavaScript can be found on tutorials and online very easily, so I will not repeat all of them here. However, I will include some functionalities that I may use and refer back to often. This will focus mainly on how we can use these languages, along with Python, to gather useful data and implement nice functionalities. 

\subsection{HTML Commands}



\subsubsection{Global Attributes and Common Tags}

Here is probably the tags that you will see most in an HTML page. 
\begin{enumerate}
    \item The $\texttt{<main>}$ tag specifies the main content of the document.
    \item The $\texttt{<article>}$ tag specifies independent, self-contained content. It does not render as anything special in a browser, but you can use CSS to style the $\texttt{<article>}$ element.
    \item The $\texttt{<div>}$ and $\texttt{<section>}$ tags defines a section in a document.
\end{enumerate}

Global attributes are attributes that can be used with all HTML elements. 
\begin{enumerate}
    \item The $\texttt{id}$ attribute specifies a unique id for a HTML element. The value of the id attribute must be unique within the HTML document.
    \begin{cverbatim}
    <h1 id="myHeader">My Header</h1> 
    \end{cverbatim}

    \item The $\texttt{title}$ attribute specifies extra information about an element, shown as a tooltip text when the mouse moves over the element. 
    \begin{cverbatim}
        <p title="Further Information">Information Presented</p>
    \end{cverbatim} 

    \item The $\texttt{class}$ attribute specifies one or more classnames for an element. This is like an id attribute but multiple elements can have the same class name, and an element with multiple classnames are separated with a space.  
    \begin{cverbatim}
    <p class="center large">paragraph</p> 
    \end{cverbatim}

    \item The $\texttt{style}$ attribute specifies an inline CSS style for an element.

    \item The $\texttt{lang}$ specifies the language of the element's content, and $\texttt{spellcheck}$ specifies whether the element is to have its spelling/grammar checked or not.
\end{enumerate}



\subsubsection{Images}

The $\texttt{<img>}$ tag defines an image
\begin{cverbatim}
 <img src="image.png" alt="text" style="width;42px;height:42px;">
\end{cverbatim}
with the following attributes:
\begin{enumerate}
    \item $\texttt{src}$ specifies the source of the image. 
    \item $\texttt{alt}$ specifies the alternative text that will appear if the image fails to render.
    \item $\texttt{width}$ and height specifies the width and height, respectively.
    \item $\texttt{style}$ specifies the multiple things defined with CSS 
    \begin{enumerate}
        \item $\texttt{vertical-align:top, middle, bottom}$ aligns the image vertically
        \item $\texttt{margin:50px 0px}$
    \end{enumerate}
\end{enumerate}

\subsubsection{Hyperlinks}

The $\texttt{<a>}$ tag defines a hyperlink, with the following attributes:
\begin{enumerate}
    \item $\texttt{href}$ specifies the URL/file of the destination. Note that this tag may contain absolute URLs, relative URLs, or file names.
    \item $\texttt{target}$ specifies where to open the linked document. $\texttt{target=BLANK}$ opens it in a new tab, while $\texttt{target=SELF}$ (default) opens in the current tab.
\end{enumerate}
\begin{cverbatim}
<a href="https://www.linktodestination.com" target="BLANK">Hyperlinked Text</a>
\end{cverbatim}
To hyperlink an image, simply nest the $\texttt{<img>}$ tag in the $\texttt{<a>}$ tag.
\begin{cverbatim}
<a href="www.website.com"> 
    <img src="WebsiteLogo.png" alt="Logo">
</a>
\end{cverbatim}
  
\subsubsection{Buttons}

The $\texttt{<button>}$ tag defines a clickable button. You can put text, along with tags like $\texttt{<img>}$ inside it. It has multiple attributes:
\begin{enumerate}
    \item The $\texttt{type="VALUE"}$ attribute determines what type of button it is. It takes one of the three values $\texttt{"button"}$, $\texttt{"reset"}$, $\texttt{"submit"}$. 
    
    \item The disabled attribute determines whether the button is disabled or not. It is un-clickable, until a JavaScript removes the disabled value. 

    \item The $\texttt{onclick="JavaScript"}$ attribute determines what happens when you click the button.
\end{enumerate}

\subsubsection{Audio/Video}
The $\texttt{<audio>}$ tag is used to embed sound content in a document, such as music or other audio streams. It contains one or more <source> tags with different audio sources, supporting .mp3, .wav, and .ogg files. The browser will choose the first source it supports. The text between the $\texttt{<audio>}$ and $\texttt{</audio>}$ tags will only be displayed in browsers that do not support the $\texttt{<audio>}$ element. 
\begin{cverbatim}
<audio controls>
  <source src="audio.mp3" type="audio/mpeg">
  Your browser does not support the audio element. 
</audio>
\end{cverbatim}

\begin{center}
\begin{table}[h]
\centering
\begin{tabular}{|p{0.2\linewidth}|p{0.2\linewidth}|p{0.5\linewidth}|}
\hline
\textbf{Attribute} & \textbf{Value} & \textbf{Description} \\
\hline
autoplay & autoplay & Specifies that the audio will start playing as soon as it is ready \\
\hline
controls & controls & Specifies that audio controls should be displayed (such as a play/pause button etc) \\
\hline
loop & loop & Specifies that the audio will start over again, every time it is finished \\
\hline
muted & muted & Specifies that the audio output should be muted \\
\hline
preload & auto OR metadata OR none & Specifies if and how the author thinks the audio should be loaded when the page loads \\
\hline
src & \textit{URL} & Specifies the URL of the audio file \\
\hline
\end{tabular}
\end{table}
\end{center}

The $\texttt{<video>}$ tag is used to embed video content in a document, such as a movie clip or other video streams. It contains one or more <source> tags with different video sources. The browser will choose the first source it supports. The text between the $\texttt{<video>}$ and $\texttt{</video>}$ tags will only be displayed in browsers that do not support the $\texttt{<video>}$ element.
\begin{cverbatim}
<video width="320" height="240" controls>
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.ogg" type="video/ogg">
  Your browser does not support the video tag.
</video>
\end{cverbatim}
\begin{center}
\begin{table}[h]
\centering
\begin{tabular}{|p{0.2\linewidth}|p{0.2\linewidth}|p{0.5\linewidth}|}
\hline
\textbf{Attribute} & \textbf{Value} & \textbf{Description} \\
\hline
autoplay & autoplay & Specifies that the video will start playing as soon as it is ready \\
\hline
controls & controls & Specifies that video controls should be displayed (such as a play/pause button etc). \\
\hline
height & \textit{pixels} & Sets the height of the video player \\
\hline
loop & loop & Specifies that the video will start over again, every time it is finished \\
\hline
muted & muted & Specifies that the audio output of the video should be muted \\
\hline
poster & \textit{URL} & Specifies an image to be shown while the video is downloading, or until the user hits the play button \\
\hline
preload & auto OR metadata OR none & Specifies if and how the author thinks the video should be loaded when the page loads \\
\hline
src & \textit{URL} & Specifies the URL of the video file \\
\hline
width & \textit{pixels} & Sets the width of the video player \\
\hline
\end{tabular}
\end{table}

\end{center}


\subsection{CSS Commands}
The $\texttt{<style>}$ tag is used to define style information (CSS) for a document, placed within the $\texttt{<head>}$ tag in the beginning of the document. Inside the $\texttt{<style>}$ element you specify how HTML elements should render in a browser.
\begin{cverbatim}
<html> 
    <head>
        <style>
            body {background-color:lightblue;}
            h1 {color:red; text-align:center;}
            p {color:blue; font-family:verdana; font-size:20px;}
        </style>
    </head>
    
    <body>
        <h1>A heading</h1>
        <p>A paragraph.</p>
    </body>
</html>
\end{cverbatim}
  
\subsubsection{CSS Selectors}
The syntax of CSS consists of a selector and a declaration block of the form of a selector, followed by a declaration block (in curly brackets):
\begin{cverbatim}
SELECTOR {PROPERTY:VALUE; PROPERTY:VALUE;}
\end{cverbatim}
We can select HTML elements based on multiple attributes:
\begin{enumerate}
    \item (CSS Element Selector) selects HTML elements based on the element name. The CSS rule below will be applied to all HTML element with the $\texttt{<p>}$ tag.
    \begin{cverbatim}
    p {text-align:center; color:red;}
    \end{cverbatim}

    \item (CSS id Selector) selects HTML elements based on their id. This requires the use of a hash (\#) character in the CSS. The CSS rule below will be applied to the HTML element with $\texttt{id="para1"}$.
    \begin{cverbatim}
    #para1 {text-align:center; color:red;}
    \end{cverbatim}

    \item (CSS Class Selector) selects HTML elements with a specific class attribute. This requires the use of a period (.) character. The CSS rule below will be applied to all HTML elements with $\texttt{class="center"}$.
    \begin{cverbatim}
     .center {text-align:center; color:red;} 
    \end{cverbatim}

    \item (CSS Universal Selector) selects all HTML elements on the page. We use an asterisk (*)
    \begin{cverbatim}
    * {text-align:center; color:blue;}
    \end{cverbatim}

    \item (CSS Attribute Selector) selects HTML elements with a specific attribute or attribute value. The CSS rule below will be applied to all $\texttt{<a>}$ elements with a target attribute, and all $\texttt{<a>}$ elements with a $\texttt{target-"BLANK"}$ attribute
    \begin{cverbatim}
    a[target] {background-color: yellow;}
    a[target="BLANK"] {background-color: yellow;}   
    \end{cverbatim}
\end{enumerate}
Finally, we can group multiple CSS selectors into one as we do below. The CSS rule will be applied to all HTML elements with $\texttt{<p>}$ tag, $\texttt{id="para1"}$, or $\texttt{class="center"}$.
\begin{cverbatim}
 p, #para1, .center {text-align:center; color:red;} 
\end{cverbatim}

\subsubsection{Internal, External, and Inline CSS}
There are three ways to apply CSS rules: 
\begin{enumerate}
    \item To import CSS rules to an HTML file from an external source, we can use the $\texttt{<link>}$ tag within the $\texttt{<head>}$ section and reference the file containing the rules. This is used when wanting to change the look of an entire website, which may have multiple HTML files. The $\texttt{<rel>}$ attribute specifies the relationship between the current document and the linked document. 
    \begin{cverbatim}
    <html> 
    <head>
    <link rel="stylesheet" href="mystyle.css">
    <head>
    <body>
    
    <h1>A heading</h1>
    <p>A paragraph.</p>
    
    </body>
    </html>
    \end{cverbatim}
    Note that the file must be a CSS file! All the rules can be written in a textedit file as below, and then saved with the .css extension. The file "mystyle.css" should look like this:
    \begin{cverbatim}
    body {background-color:lightblue;}
    h1 {color:navy; margin-left:20px;}
    \end{cverbatim}

    \item To apply CSS rules to an HTML file internally, we can just put all the selectors within the $\texttt{<style>}$ tag, as we did normally. To save space, only a snippet of the code is shown.
    \begin{cverbatim}
    <style>
    body {background-color:linen;}
    h1 {color:maroon; margin-left:40px;}
    </style>
    \end{cverbatim} 

    \item To apply CSS rules to a single element, we use inline styles using the style attribute.
    \begin{cverbatim}
    <h1 style="color:blue;text-align:center;">This is a heading</h1>
    <p style="color:red;">This is a paragraph.</p>
    \end{cverbatim}
\end{enumerate}
If there is more than one style specified for an HTML element, then the CSS style with the highest priority will be applied over the others, with the priority ranking as: inline style, then external and internal style sheets (whichever is applied later within the code), then browser default. 

\subsubsection{Basic Attributes}

We will briefly go over some basic CSS attributes. Thickness and length are usually written in terms of pixels, and modern browsers support 140 color names, along with even more colors in HEX value and RGB format. Some common CSS attributes are: 
\begin{enumerate}
    \item $\texttt{"width:300px"}$ is a box-sizing property that keeps the width of the element at 300px.
    \item $\texttt{"background-color:Tomato"}$, used for background coloring of texts, sections, etc.
    \item $\texttt{"color:Tomato",}$ used for coloring of text.
    \item $\texttt{"border: 2px solid Tomato"}$, used for formatting borders around an HTML element. We can add additional attributes: 
    \begin{enumerate}
        \item $\texttt{"border-style: solid"}$
        \item $\texttt{"border-width: 25px 10px 4px 35px"}$ means 25px top, 10px right, 4px bottom, and 35px left.
        \item $\texttt{"border-color: red green blue yellow}$ means red top, green right, blue bottom, and yellow left/.
        \item $\texttt{"border-style: dotted solid double dashed"}$
        \item $\texttt{"border-radius: 5px"}$ gives you rounded corners.
    \end{enumerate}
    \item $\texttt{"opacity:0.3"}$, used to edit the opacity/transparency of an element. 
    \item $\texttt{"background-image:paper.png"}$ specifies an image to use as the background of an element. By default the image is repeated to cover the entire element. With this attribute, we can add additional CSS attributes: 
    \begin{enumerate}
        \item $\texttt{"background-repeat: no-repeat"}$ shows the background image only once. 
        \item $\texttt{"background-position: right top"}$ is used to specify the position of the background image. 
        \item $\texttt{"background-attachment: fixed/scroll"}$ specifies whether the background image should scroll or be fixed.
    \end{enumerate}
    \item $\texttt{"margin:25px 50px 75px 100px"}$ means top margin 25px, right 50px, bottom 75px, left 100px. Marigins are used to create space around elements, outside of any defined borders. "margin:auto;" will horizontally center the element within its container.
    \item $\texttt{"padding: 25px 50px 75px 100px"}$ means top margin 25px, right 50px, bottom 75px, left 100px. Padding is used to generate space around an element's content, inside of any defined borders.
\end{enumerate}


\subsection{JavaScript Commands}

Javascript code is always inserted between $\texttt{<script>}$ and $\texttt{</script>}$ tags. These script tags can be inserted in the $\texttt{<head>}$ tag
\begin{cverbatim}
<head>
  <script>
  function myFunction() {
    document.getElementById("demo").innerHTML = "Paragraph changed.";
  }
  </script>
</head>
\end{cverbatim}
or at the bottom of the body tag (this improves display speed because script interpretation slows down display) 
\begin{cverbatim}
<body>

  ...

  <script>
  function myFunction() {
    document.getElementById("demo").innerHTML = "Paragraph changed.";
  }
  </script>
</body>
\end{cverbatim}
Also, scripts can also be played in external .js files, with obvious advantages of accessibility and organization. For example, the external file myScript.js would contain multiple JavaScript functions (remember, without the script tag). 
\begin{cverbatim}
function myFunction1() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}

function myFunction2() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
... 
\end{cverbatim}
and these collections of functions would be called by placing the folllowing script tag with the correct src (source) attribute referencing the .js file. 
\begin{cverbatim}
<html>
<body>

<h2>Demo External JavaScript</h2>

<p id="demo">A Paragraph.</p>

<button type="button" onclick="myFunction1()">Try it</button>

<p>This example links to "myScript.js".</p>
<p>(myFunction is stored in "myScript.js")</p>

<script src="myScript.js"></script>

</body>
</html>
\end{cverbatim}
Finally, scripts can be placed directly in html elements by writing the entire function in the attribute. 
\begin{cverbatim}
<button type="button" onclick="document.getElementById("demo").innerHTML = 'Paragraph 
changed.'">Try it</button>
\end{cverbatim}

\subsubsection{JavaScript Display}

All of these functions introduced below should be written inside a function as below (or in the html tag):
\begin{cverbatim}
function myFunction() {
  ...
}
\end{cverbatim}
One of the many JavaScript HTML methods is $\texttt{getElementById()}$, which finds an element with a certain id. In most contexts, we write it as $\texttt{document.getElementById()}$. 
\begin{enumerate}
    \item $\texttt{document.getElementById().innerHTML}$ changes the element content to anything. 
    \begin{cverbatim}
    document.getElementById("id").innerHTML = "Resulting Text"
    \end{cverbatim}

    \item $\texttt{document.getElementById().src}$ changes the value of the src (source) attribute, which can be used to change images. 
    \begin{cverbatim}
    document.getElementById("id").src = "resulting_image.png"
    \end{cverbatim}

    \item $\texttt{document.getElementById().style.display}$ changes the CSS display. Setting it equal to block renders the element as a block-level content, none does not dispaly the element at all, flex displays it as a block-level flex box, inherit inherits the display from the parent element, and initial sets the property to its default value. 
    \begin{cverbatim}
    document.getElementById("id").style.display = "block"
    \end{cverbatim}
\end{enumerate}
Some further output functions are below. 
\begin{enumerate}
    \item $\texttt{window.alert()}$ pops up an alert box to display data. 
    \begin{cverbatim}
    window.alert("Alert Message")
    \end{cverbatim}
\end{enumerate}

\section{Web APIs}

When we look at a radio station, there is a power button, some knobs to adjust the volumes, and another knob to adjust the frequency. This is an \textbf{interface} that a user can deal with in order to control the machine, while not knowing all \textit{how} these things are done. All the inner mechanisms and wiring within the radio is abstracted away from the user. If we want to graphically show it for more familiarity, we can use a \textbf{graphical user interface (GUI)}. An interface that allows us to communicate with a programming application is an \textbf{application programming interface (API)}. In here, we will learn how to use API, more specifically web APIs. In web APIs, we use some program to communicate with a complicated web server to have it do commands for us, like give us data or compute something for us. Almost all the time, APIs these days will refer to web APIs. 

Even a button on a music playing app is an interface, since when we press the button, it invokes some function that gets the music to start playing. It may be the case the case that our music isn't stored on our phone, but streamed over the internet, and so we must use a web API to retrieve the mp3 data. In fact, it's APIs all the way down. As a user, we don't need to know the implementation or how it works. We just need to know what we're allowed to change. It is also amazing that every browser (e.g. Chrome, Firefox, Safari, Brave, etc.) can run the \textit{same exact} code (HTML, CSS, JavaScript) found over the internet. This works because there is a set of web APIs that web browsers must all implement. The browser is called a \textbf{web client} that connects to a \textbf{web server}. 

\subsection{REST API}

\subsection{HTTP Protocol and Requests}

The Python \textbf{requests} library allows us to easily make HTTP requests to websites. Note that while requests is useful for getting information from websites, it is not a package for parsing that information, which is done by BeautifulSoup. We can HTTTP request to a website by inputting its URL into the $\texttt{get}$ method. It returns the HTTP status code in a $\texttt{Response}$ object. 
\begin{cverbatim}
import requests 

r = requests.get('https://xkcd.com/353/')
print(r)                # <Response [200]>
print(r.status_code)    # 200
\end{cverbatim}
To see the HTML contents of this page, we can use two functions. 
\begin{enumerate}
    \item $\texttt{r.text}$ returns the content of the response in Unicode,which is preferred for textual responses such as HTML or XML.
    \item $\texttt{r.content}$ returns the content of the response in bytes, which is preferred for image or PDF files. 
\end{enumerate}    
However, this is essentially a giant string, so this will not help us parse the file for specific attributes or values. They will both look like HTML text in the interpreter, but you can see their main difference in type. 
\begin{cverbatim}
print(type(r.text))         <class 'str'>
print(type(r.content))      <class 'bytes'>
\end{cverbatim} 

We can also take images and save them in a file by reading and writing them in bytes. 
\begin{cverbatim}
r = requests.get('https://imgs.xkcd.com/comics/python.png')

with open("comic.png", "wb") as f: 
    f.write(r.content) 
\end{cverbatim}
Finally, we can look at important general information about the site by calling the $\texttt{headers}$ attribute. This tells us the following: 
\begin{enumerate}
    \item \textit{Server} : which server the site is running on 
    \item \textit{Content-Type} : type of file 
    \item \textit{Last-Modified} : 
\end{enumerate}
\begin{cverbatim}
print(r.headers) 

{'Connection': 'keep-alive', 'Content-Length': '90835', 'Server': 'nginx', 'Content-
Type': 'image/png', 'Last-Modified': 'Mon, 01 Feb 2010 13:07:49 GMT', 'ETag': 
'"4b66d225-162d3"', 'Expires': 'Sun, 09 Jul 2023 23:05:36 GMT', 'Cache-Control': 
'max-age=300', 'Accept-Ranges': 'bytes', 'Date': 'Mon, 10 Jul 2023 01:41:39 GMT', 
'Via': '1.1 varnish', 'Age': '0', 'X-Served-By': 'cache-iad-kcgs7200062-IAD', 'X-
Cache': 'HIT', 'X-Cache-Hits': '1', 'X-Timer': 'S1688953299.092258,VS0,VE77'}
\end{cverbatim}



\section{Web Scraping}

Web scraping is very useful for gathering data, setting up crawlers, and for NLP tasks. 

\subsection{BeautifulSoup}

\subsection{Scrapy}

\subsection{LXML}

\section{Front-End Frameworks}

The three most popular front-end, client-side web frameworks are React, Angular, and Vue, in decreasing order of popularity. We will use React. 


\section{Django}

Django itself is web framework used for developing web applications based on python. Which is used for making development process more simple and easy. To get a high level overview of Django, we use the \textit{MVT} design pattern: 
\begin{enumerate}
    \item \textit{Model} : The model is the data you want to present in your website, which is usually stored in a database first, usually in a relational database like SQL. Located in $\texttt{models.py}$. 

    \item \textit{View} : The view is the request handler that returns the relevant template and context based on the request from the user. It is basically a function that takes HTTP requests as arguments, imports the relevant models, and finds out which data to send to the template. Located in $\texttt{views.py}$. 

    \item \textit{Template} : The template is a text file (e.g. HTML file) containing the layout of the web page, with logic on how to display the data. The templates of an application is located in a directory called $\texttt{templates}$. 

    \item \textit{URL} : Django also provides a way to navigate around the different pages in a website. Then a user requests a URL, Django decides which view it will send it to. This is done in a file called $\texttt{urls.py}$. 
\end{enumerate}
When you have installed Django and created your first Django web application, and the browser requests the URL, this is basically what happens: 
\begin{enumerate}
    \item Django receives the URL, checks the $\texttt{urls.py}$ file, and calls the view that matches the URL. 
    \item The view, located in $\texttt{views.py}$, checks for relevant models. 
    \item The models are imported from the $\texttt{models.py}$ file. 
    \item The view then sends the data to a specified template in the template folder. 
    \item The template contains HTML and Django tags, and with the data it returns finished HTML content back to the browser. 
\end{enumerate}

We can get started by making a new virtual environment (I used conda) and installing django with pip. 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop$ pip install django
\end{cverbatim}
We can cd into our directory and use the command 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop$ django-admin startproject tennis_club
\end{cverbatim}
to initialize a project folder called $\texttt{tennis\_club}$ in your current working directory. In fact we can look at its tree once it is initialized. 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop$ cd tennis_club/
(web) mbahng@xps15:~/Desktop/tennis_clubj$ tree
.
├── tennis_club
│   ├── asgi.py
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── manage.py

1 directory, 6 files
\end{cverbatim}
Now to run the default server, we can run the $\texttt{manage.py}$ file with the $\texttt{runserver}$ keyword. 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply 
the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
July 09, 2023 - 19:50:46
Django version 4.2.3, using settings 'tennis_club.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
\end{cverbatim}
And now, if we go to $\texttt{http://127.0.0.1:8000/}$ or $\texttt{localhost:8000}$, we should see the default layout of our page. 


Now we can proceed to built an \textbf{app}, which is a web application that has a specific meaning in your project, like a home page, a contact form, or a members database. I will create an app called $\texttt{members}$ in this project with the command 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py startapp members
\end{cverbatim}
This will create a $\texttt{members}$ directory in your project. 

\subsection{URLs}



\subsection{Models}

Ideally, we would like to work with things stored in databases and extract them based off some request. We will focus on constructing these databases. As mentioned in the beginning, in Django, data is created in objects, called Models, and is actually tables in a database. 

\subsubsection{Instantiating a Model}

Say that we want to create a database in our members app. We navigate to $\texttt{members/models.py}$ and instantiate a subclass of $\texttt{models.Model}$. We also want to describe the features of each element. 
\begin{cverbatim}
from django.db import models

class Member(models.Model):
  firstname = models.CharField(max_length=255)  # first name 
  lastname = models.CharField(max_length=255)   # last name
\end{cverbatim}
Both fields $\texttt{firstname}$ and $\texttt{lastname}$ are text fields with a maximum length of 255 characters (this is similar to SQL). This database, along with all other databases, will be stored in the $\texttt{db.sqlite3}$ database file in the root of the project. Then we want to propagate these changes by migrating them through the two commands: 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py makemigrations members
Migrations for 'members':
  members/migrations/0001_initial.py
    - Create model Member
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, members, sessions
Running migrations:
  Applying members.0001_initial... OK
\end{cverbatim}

\subsubsection{Editing Data in a Model}

Now that we have a new database, we can use the Python interpreter to add, update, and delete members to it. We can see that there is no data/queries in it. 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py shell
Python 3.11.4 (main, Jul  5 2023, 13:45:01) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from members.models import Member
>>> Member.objects.all()
<QuerySet []>
\end{cverbatim}
\begin{enumerate}
    \item We can add by instantiating a $\texttt{Member}$ object and calling the $\texttt{save}$ method. 
\begin{cverbatim}
>>> member = Member(firstname='Emil', lastname='Refsnes')
>>> member.save()
>>> Member.objects.all().values()
<QuerySet [{'id': 1, 'firstname': 'Emil', 'lastname': 'Refsnes'}]>
\end{cverbatim}
To add multiple objects we can simply use for loops. 

    \item The returned object all all queries supports indexing so you can access them by index and update/save their information. 
\begin{cverbatim}
>>> x = Member.objects.all()[0]
>>> x
<Member: Member object (1)>
>>> x.firstname
'Emil'
>>> x.firstname = "Stale"
>>> x.save()
>>> Member.objects.all().values()
<QuerySet [{'id': 1, 'firstname': 'Stale', 'lastname': 'Refsnes'}]>
\end{cverbatim} 

    \item To delete an element, we call the $\texttt{delete}$ method. 
\begin{cverbatim}
>>> x.delete()
(1, {'members.Member': 1})
>>> Member.objects.all().values()
<QuerySet []>
\end{cverbatim}
\end{enumerate}

\subsubsection{Updating a Model}

Say that we want to add (or remove) some fields/features in our model. We can just go into $\texttt{models.py}$, make our changes: 
\begin{cverbatim}
from django.db import models

class Member(models.Model):
  firstname = models.CharField(max_length=255)
  lastname = models.CharField(max_length=255)
  phone = models.IntegerField()
  joined_date = models.DateField()
\end{cverbatim}
and make the migration to tell Django to update the database. They will ask us what we want to do with the newly added fields of the already existing data in the prompt below. 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py makemigrations members
It is impossible to add a non-nullable field 'joined_date' to member without specifying a default. This is because the database needs something to populate existing rows.
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit and manually define a default value in models.py.
Select an option: 
\end{cverbatim}
Some data are by default not allowed to be null values, but we can override this by setting the $\texttt{null=True}$ parameter. 
\begin{cverbatim}
from django.db import models

class Member(models.Model):
  firstname = models.CharField(max_length=255)
  lastname = models.CharField(max_length=255)
  phone = models.IntegerField(null=True)
  joined_date = models.DateField(null=True)
\end{cverbatim}
After which we can run the migrate again. 
\begin{cverbatim}
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py makemigrations members
Migrations for 'members':
  members/migrations/0002_member_joined_date_member_phone.py
    - Add field joined_date to member
    - Add field phone to member
(web) mbahng@xps15:~/Desktop/tennis_club$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, members, sessions
Running migrations:
  Applying members.0002_member_joined_date_member_phone... OK
\end{cverbatim}
We can simply update the null data as before, in the updating data part in the previous subsection. 
\end{document}

